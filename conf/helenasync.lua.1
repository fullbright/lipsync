-----
-- User configuration file for lsyncd.
-- This needs lsyncd >= 2.0.3
--
-- This configuration's objective is to handle offline modifications
-- It will write a file on the drive when a file is ready for upload to the remote server
-- and will delete it when the file is successfully uploaded
-- If the computer is shutdown or the process crashes whitout finishing it's initial 
-- upload, on lsync startup, the file will be read and upload will retart.

local offline_rsyncssh = {
    -- based on default rsync.
	default.rsyncssh,
	
	-- for this config it is important to keep maxProcesses at 1, so
	-- the postcmds will only be spawned after the rsync completed
	maxProcesses = 1,
	
	--onStartup = function(inlet)
	    --- Load offline actions and sync
	    ---log("Offline","--- Loading offline actions")
	    ---spawn(event, "/home/fullbright/.helenasync/lipsync-notify", 
		---			"Offline ...", "Loading offline files.")

	    ---log("Offline","--- Adding offline actions to sync queue")
	    ---will stack on the queue and do the postcmd when its finished
	    ---local offline_event = inlet.createBlanketEvent()
	    ---offline_event.isOffline = true
	    -- the original event is simply forwarded to the normal action handler
	    ---return default.rsync.action(inlet)
	---end,

	onModify = function(inlet)
	   --- store offline modification file
	   log("Offline","--- storing offline modification file")
	   local rdseed = math.randomseed(os.time())
	   local file = assert(io.open("/home/fullbright/.helenasync/offline/lipsync.offline"..rdseed, "w"))
	   spawn(event, "/home/fullbright/.helenasync/lipsync-notify", 
				"Syncing ...", "/home/fullbright/.helenasync/offline/lipsync.offline."..rdseed)
	   local content = ""
	end,
	
	-- called whenever something is to be done
	action = function(inlet)
	    log("Offline","Entering inlet function")
		local event = inlet.getEvent()
		local config = inlet.getConfig()
		
		log("Offline", "Event type : "..event.etype)
		log("Offline", "Config source : "..config.source)
		log("Offline", "Config target : "..config.target)
		---log("Offline", "^source : "..^source)
		-- if the event is a blanket event and not the startup,
		-- its there to spawn the webservice restart at the target.
		if event.etype == "Blanket" then
			-- uses rawget to test if "isPostcmd" has been set without
			-- triggering an error if not.
			local isPostcmd = rawget(event, "isPostcmd")
			if event.isPostcmd then
				log("Offline","--------- Writing offline file to disk ...")
				---io.output(io.open("/home/fullbright/.helenasync/offline/lipsync.offline","w"))
				---io.write("This is\nsome sample text\nfor Lua.")
				---io.close()
				local rdseed = math.randomseed(os.time())
				local file = assert(io.open("/home/fullbright/.helenasync/offline/lipsync.offline"..rdseed, "w"))
				spawn(event, "/home/fullbright/.helenasync/lipsync-notify", 
					"Syncing ...", "/home/fullbright/.helenasync/offline/lipsync.offline."..rdseed)
				local content = ""

				--- etype				
				if(event.etype == nil) then
					log("Offline","---- No event etype defined.")
				else
					content = content.."event.etype="..event.etype.."\n"
				end

				--- path				
				if(event.path == nil) then
					log("Offline","---- No event path defined.")
				else
					content = content.."event.path="..event.path.."\n"
				end

				--- source				
				if(event.source == nil) then
					log("Offline","---- No event source defined.")
				else
					content = content.."event.source="..event.source.."\n"
				end

				--- source path				
				if(event.sourcePath ~= nil) then
					content = content.."event.sourcePath="..event.sourcePath.."\n"
				end

				file:write(content)
				file:close()

				log("Offline", "Storing offline file path in the event")
				event.offlinefile = "/home/fullbright/.helenasync/offline/lipsync.offline"..rdseed
				log("Offline","--------- Offline file written.")
        			return
			else
            			-- this is the startup, forwards it to default routine.
            			return default.rsyncssh.action(inlet) 
			end
			error("this should never be reached")
		elseif event.etype == "Delete" then
	    		--- If a file is deleted, rename it to .file.deleted
	    		--- Another process will purge .deleted files.
	    		spawn(event, "/bin/mv", event.sourcePath, "."..event.sourcePath..".deleted")	
			log("Offline","file renamed to "..event.sourcePath..".deleted")		
		end
		-- for any other event, a blanket event is created that
		-- will stack on the queue and do the postcmd when its finished
		local sync = inlet.createBlanketEvent()
		sync.isPostcmd = true
		sync.isOffline = true
		-- the original event is simply forwarded to the normal action handler
		return default.rsync.action(inlet)
	end,

	-- called when a process exited.
	-- this can be a rsync command, the startup rsync or the postcmd
	collect = function(agent, exitcode)
		-- for the ssh commands 255 is network error -> try again
		local isPostcmd = rawget(agent, "isPostcmd")
		local isOffline = rawget(agent, "isOffline")
		if not agent.isList and agent.etype == "Blanket" and isOffline then
			if exitcode == 255 then
				spawn(event, "/home/fullbright/.helenasync/lipsync-notify", 
					" Offline - Again", "Network error again")
				return "again"
			else
				spawn(event, "/home/fullbright/.helenasync/lipsync-notify", 
					" Done", "Ok")
				return
			end
		else
			--- everything else, forward to default collection handler
			return default.collect(agent,exitcode)
		end
		error("this should never be reached")
	end,

	-- called before anything else
	-- builds the target from host and targetdir
	prepare = function(config)
		if not config.host then
			error("offline_rsyncssh needs 'host' configured", 4)
		end
		if not config.targetdir then
			error("offline_rsyncssh needs 'targetdir' configured", 4)
		end
		if not config.target then
			config.target = config.host .. ":" .. config.targetdir
		end
		return default.rsync.prepare(config)
	end	
}

sync{
    offline_rsyncssh, 
    source="/home/fullbright/scripts/", 
    host="sergio@home.afanou.com", 
    targetdir="/media/DATA/SERGIO-PC/sergio/syncwin/", 
    rsyncOpts="-ltusravC"

}

sync{default.rsyncssh, source="/home/fullbright/mydropbox/", host="sergio@home.afanou.com", targetdir="/home/sergio/mydropbox/", rsyncOpts="-ltusravC", init=false}

sync{default.rsyncssh, source="/home/fullbright/Documents/Personnel/sergio/documents/", host="sergio@home.afanou.com", targetdir="/media/DATA/SERGIO-PC/sergio/documents/", rsyncOpts="-ltusravC", init=false}

sync{default.rsyncssh, source="/home/fullbright/Documents/Professionel/", host="sergio@home.afanou.com", targetdir="/media/DATA/SERGIO-PC/Professionel/", rsyncOpts="-ltusravC", init=false}
