#!/bin/sh -e
# Distributed under the terms of the BSD License.
# Copyright (c) 2011 Phil Cryer phil.cryer@gmail.com
# Source https://github.com/philcryer/lipsync

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

### BEGIN INIT INFO
# Provides:          lipsyncd
# Required-Start:    $syslog $local_fs
# Required-Stop:     $syslog $local_fs
# Should-Start:      dbus avahi
# Should-Stop:       dbus avahi
# Default-Start:     2 3 4 5
# Default-Stop:      1
# Short-Description: a service that provides automated, command-line syncing
### END INIT INFO

PARAM_CONF_FILE=/opt/helenasync/conf/helenasync.conf

######
# Load parameters
######
if [ -e $PARAM_CONF_FILE ]; then
        . $PARAM_CONF_FILE
else
	echo "****** ERROR ******* : The configuration file $PARAM_CONF_FILE does not exist !"
fi

######
# Test if daemon exists
######
test -x $DAEMON || exit 0

RUN=yes
RUN_AS_USER=$USER_NAME

# Include lipsyncd defaults if available
if [ -f /etc/default/lipsyncd ] ; then
    . /etc/default/lipsyncd
fi

# ensure user's log/pid dir is avail, create if not
if [ ! -d /opt/$NAME/log ]; then
    mkdir /opt/$NAME/log
fi
# verify sane perms on log/pid dir
chown $USER_NAME:$USER_NAME /opt/$NAME/log

if [ "x$RUN" != "xyes" ] ; then
    echo "RUN variable is set to $RUN. Exiting ..."
    exit 0
fi

DAEMON_OPTS="-a $RUN_AS_USER"

set -e

case "$1" in
  start)
	echo -n "Starting $NAME daemon..."
	
	echo "Executing command : su $RUN_AS_USER -c '$DAEMON -log $LOGLEVEL -delay $DELAY_SEC -logfile $LOGFILE -pidfile $PIDFILE $CONF_FILE'"
	su $RUN_AS_USER -c "$DAEMON -log $LOGLEVEL -delay $DELAY_SEC -logfile $LOGFILE -pidfile $PIDFILE $CONF_FILE"
	echo "done"

	echo "Saving daemon $DAEMON pid file"
	echo `pidof $DAEMON` > $PIDFILE
	echo "====== $DAEMON (pid `cat $PIDFILE`) started on `date` =====" >> $LOGFILE
	echo "====== $DAEMON (pid `echo  $NAME | xargs pidof`) started on `date` =====" >> $LOGFILE
	echo "`date "+%a %b %d %T %Y"` Daemon: helenasyncd has started as pid `pidof $DAEMON`" >> $LOGFILE
	

	#Starting lipsync updater in a separated thread
	echo "Starting lipsync updater in a separated thread ... "
	$UPDATER_DAEMON >> $LOGFILE &
	eval UPDATER_PID=`ps aux | grep $UPDATER_DAEMON | grep -v grep | awk '{print $2}'`
	echo $UPDATER_PID > $UPDATER_PIDFILE
	echo "Done."
	echo "Updater has started with pid $UPDATER_PID"
	
	#notify startup
	$NOTIFY_BIN "${NAME} has started."
	;;
  stop)
	set +e
	echo "Stopping $NAME daemon..."
	echo "`date "+%a %b %d %T %Y"` Daemon: helenasyncd is stopping" >> $LOGFILE
	
	######## Killing daemon
	echo "   Killing all $DAEMON ... "
	echo "       Removing PID file for $DAEMON ... "
	if [ -f $PIDFILE ] ; then
		echo "       PID file found."
		echo -n "       Killing process with PID `cat $PIDFILE` ... "
		kill -9 `cat $PIDFILE`		
		echo "       done."

		echo -n "       Removing PID file ..."
		rm $PIDFILE
		echo "       done."

	else
		echo "       Fail. $PIDFILE not found."
		echo "       Trying to kill all $DAEMON processes"
		NBPROCESS=`ps aux | grep $DAEMON | grep -v grep | wc -l`

		if [ $NBPROCESS -gt 0 ]; then
			#ps aux | grep $UPDATER_DAEMON | grep -v grep | awk '{print $2}' | xargs kill -9
			`killall $DAEMON`
		else
			echo "       No process found for daemon $DAEMON"
		fi
		
		echo "       done"
	fi
	
	
	
	######### Killing updater daemon
	echo "   Killing all $UPDATER_DAEMON ... "
	echo "       Removing PID file for $UPDATER_DAEMON ... "	
	if [ -f $UPDATER_PIDFILE ]; then
		echo "       Pid file found."
		echo -n "       Killing daemon $UPDATER_DAEMON ... "		
		kill -9 `cat $UPDATER_PIDFILE`
		echo "done"

		echo -n "       Pid file found. PID is : `cat $UPDATER_PIDFILE`. Removing ..."
		rm $UPDATER_PIDFILE
		echo "       Done."

	else
		echo "       Fail. $UPDATER_PIDFILE not found."
		echo "       Trying to kill all $UPDATER_DAEMON processes"
		NBPROCESS=`ps aux | grep $UPDATER_DAEMON | grep -v grep | wc -l`

		if [ $NBPROCESS -gt 0 ]; then
			ps aux | grep $UPDATER_DAEMON | grep -v grep | awk '{print $2}' | xargs kill -9
		else
			echo "       No process found for daemon $UPDATER_DAEMON"
		fi
		echo "       done"
	fi
	#
	echo "Done."
	set -e

	$NOTIFY_BIN "$NAME daemon stopped."
	;;
  force-reload)
	# check whether $DAEMON is running. If so, restart
	start-stop-daemon --stop --test --quiet --pidfile \
		$PIDFILE --exec $DAEMON \
	&& $0 restart \
	|| exit 0
	;;
  restart)
	echo -n "Restarting $DESC: "
	start-stop-daemon --stop --quiet --pidfile \
		$PIDFILE --exec $DAEMON
	sleep 1
	start-stop-daemon --start --quiet --pidfile \
		$PIDFILE --exec $DAEMON -- $DAEMON_OPTS
	echo "$NAME."
	$NOTIFY_BIN "$NAME has restarted."
	;;
  status)
	if [ -s $PIDFILE ]; then
        	echo "$NAME is running as PID `cat $PIDFILE`."
                exit 0
        else
           	echo "$NAME not running."
           	exit 1
        fi
	;;
  *)
	N=/etc/init.d/$NAME
	echo "Usage: $N {start|stop|restart|force-reload}" >&2
	exit 1
	;;
esac

exit 0
